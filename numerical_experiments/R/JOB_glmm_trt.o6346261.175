
R version 4.0.4 RC (2021-02-08 r79975) -- "Lost Library Book"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env Rscript
> 
> #' cd $ups 
> #' cd numerical_experiments/R
> #' Rnosave 2021-06-08-glmm_trt.R -t 1-1000 -tc 60 -N JOB_glmm_trt
> #' qalter -tc 40 job_IDX 
> 
> arg_str <- as.character(Sys.getenv("SGE_TASK_ID"))
> arrayjob_idx <- as.numeric(arg_str)
> # rm(list = ls()); arrayjob_idx <- 1
> 
> library(lme4)
> library(lmerTest)
> library(here)
> library(matrixStats)
> library(dplyr)
> library(geepack)
> message("Loaded needed packages.")
> 
> # define results dir; create dir if any does not exist
> out_dir_raw <- paste0(here::here(), "/numerical_experiments/results_CL/2021-06-08-glmm_trt_raw")
> dir.create(path = out_dir_raw)
> message(paste0("dir.exists(path = out_dir_raw): ", dir.exists(path = out_dir_raw)))
> 
> # define results path
> out_fpath_raw <- paste0(out_dir_raw, "/arrayjob_", arrayjob_idx, ".rds")
> message(out_fpath_raw)
> 
> 
> # ------------------------------------------------------------------------------
> # define experiment params 
> coef_0  <- -0.25
> coef_x1 <- 0.5
> tau2    <- 1
> sigma2  <- 1
> N0      <- 80   # sample size of each of the two arms
> ni      <- 3
> N1_min  <- 10
> N1_max  <- 250
> 
> # define N1 grid
> N1_grid   <- seq(from = N1_min, to = N1_max, by = 1)
> N1_grid_l <- length(N1_grid)
> # number of resamplings 
> B_boot    <- 1000 # TODO
> 
> 
> # ----------------------------------------------------------------------------
> # simulate the data 
> 
> # seed seed for reproducibility of the results 
> set.seed(arrayjob_idx)
> 
> # deterministic quantities
> N_tmp <- N1_max
> subjid_i     <- 1:(N_tmp * 2)         # subject ID unique in whole data set 
> subjid_arm_i <- c(1:N_tmp, 1:N_tmp)   # subject ID unique in a trt arm
> x1_i         <- c(rep(1, N_tmp), rep(0, N_tmp))
> # simulated quantities
> b0_i      <- rnorm(n = (N_tmp * 2), mean = 0, sd = tau2)
> # simulated/generated data frame variables 
> subjid_ij     <- rep(subjid_i, each = ni) 
> subjid_arm_ij <- rep(subjid_arm_i, each = ni) 
> x1_ij     <- rep(x1_i, each = ni) 
> b0_ij     <- rep(b0_i, each = ni) 
> XB_ij     <- coef_0 + b0_ij + coef_x1 * x1_ij
> p_ij      <- 1/(1 + exp(-XB_ij))
> y_ij      <- rbinom(n = length(p_ij), size = 1, prob = p_ij)
> dat       <- data.frame(y = y_ij, x1 = x1_ij, subjid = subjid_ij, subjid_arm = subjid_arm_ij)
> 
> # make object to store simulation results 
> mat_out <- data.frame()
> 
> # make object to keep track of the beginning of time 
> t1 <- Sys.time()
> 
> 
> 
> # ------------------------------------------------------------------------------
> # ------------------------------------------------------------------------------
> # ------------------------------------------------------------------------------
> # RUN SIMULATION: UPSTRAP POWER
> 
> message(paste0("--- Running: uptstrap N0=", N0))
> 
> # data with "observed" sample of size N0 
> datN0 <-  dat %>% filter(subjid_arm <= N0)
> # subj_id corresponding to treatment/non-treatment arm 
> dat_subjid_x1_is1 <- unique(datN0 %>% filter(x1 == 1) %>% pull(subjid))
> dat_subjid_x1_is0 <- unique(datN0 %>% filter(x1 == 0) %>% pull(subjid))
> 
> # define object to store results
> # mat_out_boot_LMM   <- matrix(NA, nrow = N1_grid_l, ncol = B_boot)
> mat_out_boot_GEE   <- matrix(NA, nrow = N1_grid_l, ncol = B_boot)
> 
> # iterate over bootstrap repetitions 
> for (B_boot_idx in 1:B_boot){ # B_boot_idx <- 2
+   print(paste0("B_boot_idx: ", B_boot_idx))
+   if (B_boot_idx %% 10 == 0){
+     t_passed <- round(as.numeric(Sys.time() - t1, unit = "mins"))
+     message(paste0("B_boot_idx: ", B_boot_idx, " [", round(B_boot_idx / B_boot * 100, 2), "%], ", t_passed, " mins"))
+   }
+   ## upsample data for current boot repetition (upstrap up to N1 max)
+   dat_subjid_x1_is1_b <- sample(x = dat_subjid_x1_is1, size = N1_max, replace = TRUE)
+   dat_subjid_x1_is0_b <- sample(x = dat_subjid_x1_is0, size = N1_max, replace = TRUE)
+   dat_x1_is1_b <- lapply(dat_subjid_x1_is1_b, function(subjid_tmp) datN0[which(datN0$subjid %in% subjid_tmp), 1:2]) 
+   dat_x1_is0_b <- lapply(dat_subjid_x1_is0_b, function(subjid_tmp) datN0[which(datN0$subjid %in% subjid_tmp), 1:2]) 
+   dat_x1_is1_b <- do.call("rbind", dat_x1_is1_b)
+   dat_x1_is0_b <- do.call("rbind", dat_x1_is0_b)
+   ## make new subj ID so as to treat resampled subjects as new ones
+   dat_x1_is1_b$subjid <- rep(1:N1_max, each = ni)
+   dat_x1_is0_b$subjid <- rep((N1_max + 1):(2 * N1_max), each = ni)
+   dat_x1_is1_b$subjid_arm <- rep(1:N1_max, each = ni)
+   dat_x1_is0_b$subjid_arm <- rep(1:N1_max, each = ni)
+   dat_b <- rbind(dat_x1_is1_b, dat_x1_is0_b)
+   rm(dat_subjid_x1_is1_b, dat_subjid_x1_is0_b, dat_x1_is1_b, dat_x1_is0_b)
+   # iterate over N1 values grid
+   for (N1_grid_idx in 1:N1_grid_l){ # N1_grid_idx <- 200
+     tryCatch({
+       dat_b_sub <- dat_b[dat_b$subjid_arm <= N1_grid[N1_grid_idx], ]
+       # GEE
+       fit_GEE_formula <- formula(y ~ x1)
+       fit_GEE <- geeglm(formula = fit_GEE_formula, family = binomial(link = "logit"), 
+                         data = dat_b_sub, id = dat_b_sub$subjid, corstr = "exchangeable")
+       fit_GEE_s <- summary(fit_GEE)
+       fit_GEE_coef_est  <- fit_GEE_s$coefficients[2, 4]
+       mat_out_boot_GEE[N1_grid_idx, B_boot_idx] <- (fit_GEE_coef_est < 0.05) * 1
+       rm(dat_b_sub)
+     }, error = function(e) {message(e)})
+   }
+   rm(dat_b)
+ }
[1] "B_boot_idx: 1"
[1] "B_boot_idx: 2"
[1] "B_boot_idx: 3"
[1] "B_boot_idx: 4"
[1] "B_boot_idx: 5"
[1] "B_boot_idx: 6"
[1] "B_boot_idx: 7"
[1] "B_boot_idx: 8"
[1] "B_boot_idx: 9"
[1] "B_boot_idx: 10"
[1] "B_boot_idx: 11"
[1] "B_boot_idx: 12"
[1] "B_boot_idx: 13"
[1] "B_boot_idx: 14"
[1] "B_boot_idx: 15"
[1] "B_boot_idx: 16"
[1] "B_boot_idx: 17"
[1] "B_boot_idx: 18"
[1] "B_boot_idx: 19"
[1] "B_boot_idx: 20"
[1] "B_boot_idx: 21"
[1] "B_boot_idx: 22"
[1] "B_boot_idx: 23"
[1] "B_boot_idx: 24"
[1] "B_boot_idx: 25"
[1] "B_boot_idx: 26"
[1] "B_boot_idx: 27"
[1] "B_boot_idx: 28"
[1] "B_boot_idx: 29"
[1] "B_boot_idx: 30"
[1] "B_boot_idx: 31"
[1] "B_boot_idx: 32"
[1] "B_boot_idx: 33"
[1] "B_boot_idx: 34"
[1] "B_boot_idx: 35"
[1] "B_boot_idx: 36"
[1] "B_boot_idx: 37"
[1] "B_boot_idx: 38"
[1] "B_boot_idx: 39"
[1] "B_boot_idx: 40"
[1] "B_boot_idx: 41"
[1] "B_boot_idx: 42"
[1] "B_boot_idx: 43"
[1] "B_boot_idx: 44"
[1] "B_boot_idx: 45"
[1] "B_boot_idx: 46"
[1] "B_boot_idx: 47"
[1] "B_boot_idx: 48"
[1] "B_boot_idx: 49"
[1] "B_boot_idx: 50"
[1] "B_boot_idx: 51"
[1] "B_boot_idx: 52"
[1] "B_boot_idx: 53"
[1] "B_boot_idx: 54"
[1] "B_boot_idx: 55"
[1] "B_boot_idx: 56"
[1] "B_boot_idx: 57"
[1] "B_boot_idx: 58"
[1] "B_boot_idx: 59"
[1] "B_boot_idx: 60"
[1] "B_boot_idx: 61"
[1] "B_boot_idx: 62"
[1] "B_boot_idx: 63"
[1] "B_boot_idx: 64"
[1] "B_boot_idx: 65"
[1] "B_boot_idx: 66"
[1] "B_boot_idx: 67"
[1] "B_boot_idx: 68"
[1] "B_boot_idx: 69"
[1] "B_boot_idx: 70"
[1] "B_boot_idx: 71"
[1] "B_boot_idx: 72"
[1] "B_boot_idx: 73"
[1] "B_boot_idx: 74"
[1] "B_boot_idx: 75"
[1] "B_boot_idx: 76"
[1] "B_boot_idx: 77"
[1] "B_boot_idx: 78"
[1] "B_boot_idx: 79"
[1] "B_boot_idx: 80"
[1] "B_boot_idx: 81"
[1] "B_boot_idx: 82"
[1] "B_boot_idx: 83"
[1] "B_boot_idx: 84"
[1] "B_boot_idx: 85"
[1] "B_boot_idx: 86"
[1] "B_boot_idx: 87"
[1] "B_boot_idx: 88"
[1] "B_boot_idx: 89"
[1] "B_boot_idx: 90"
[1] "B_boot_idx: 91"
[1] "B_boot_idx: 92"
[1] "B_boot_idx: 93"
[1] "B_boot_idx: 94"
[1] "B_boot_idx: 95"
[1] "B_boot_idx: 96"
[1] "B_boot_idx: 97"
[1] "B_boot_idx: 98"
[1] "B_boot_idx: 99"
[1] "B_boot_idx: 100"
[1] "B_boot_idx: 101"
[1] "B_boot_idx: 102"
[1] "B_boot_idx: 103"
[1] "B_boot_idx: 104"
[1] "B_boot_idx: 105"
[1] "B_boot_idx: 106"
[1] "B_boot_idx: 107"
[1] "B_boot_idx: 108"
[1] "B_boot_idx: 109"
[1] "B_boot_idx: 110"
[1] "B_boot_idx: 111"
[1] "B_boot_idx: 112"
[1] "B_boot_idx: 113"
[1] "B_boot_idx: 114"
[1] "B_boot_idx: 115"
[1] "B_boot_idx: 116"
[1] "B_boot_idx: 117"
[1] "B_boot_idx: 118"
[1] "B_boot_idx: 119"
[1] "B_boot_idx: 120"
[1] "B_boot_idx: 121"
[1] "B_boot_idx: 122"
[1] "B_boot_idx: 123"
[1] "B_boot_idx: 124"
[1] "B_boot_idx: 125"
[1] "B_boot_idx: 126"
[1] "B_boot_idx: 127"
[1] "B_boot_idx: 128"
[1] "B_boot_idx: 129"
[1] "B_boot_idx: 130"
[1] "B_boot_idx: 131"
[1] "B_boot_idx: 132"
[1] "B_boot_idx: 133"
[1] "B_boot_idx: 134"
[1] "B_boot_idx: 135"
[1] "B_boot_idx: 136"
[1] "B_boot_idx: 137"
[1] "B_boot_idx: 138"
[1] "B_boot_idx: 139"
[1] "B_boot_idx: 140"
[1] "B_boot_idx: 141"
[1] "B_boot_idx: 142"
[1] "B_boot_idx: 143"
[1] "B_boot_idx: 144"
[1] "B_boot_idx: 145"
[1] "B_boot_idx: 146"
[1] "B_boot_idx: 147"
[1] "B_boot_idx: 148"
[1] "B_boot_idx: 149"
[1] "B_boot_idx: 150"
[1] "B_boot_idx: 151"
[1] "B_boot_idx: 152"
[1] "B_boot_idx: 153"
[1] "B_boot_idx: 154"
[1] "B_boot_idx: 155"
[1] "B_boot_idx: 156"
[1] "B_boot_idx: 157"
[1] "B_boot_idx: 158"
[1] "B_boot_idx: 159"
[1] "B_boot_idx: 160"
[1] "B_boot_idx: 161"
[1] "B_boot_idx: 162"
[1] "B_boot_idx: 163"
[1] "B_boot_idx: 164"
[1] "B_boot_idx: 165"
[1] "B_boot_idx: 166"
[1] "B_boot_idx: 167"
[1] "B_boot_idx: 168"
[1] "B_boot_idx: 169"
[1] "B_boot_idx: 170"
[1] "B_boot_idx: 171"
[1] "B_boot_idx: 172"
[1] "B_boot_idx: 173"
[1] "B_boot_idx: 174"
[1] "B_boot_idx: 175"
[1] "B_boot_idx: 176"
[1] "B_boot_idx: 177"
[1] "B_boot_idx: 178"
[1] "B_boot_idx: 179"
[1] "B_boot_idx: 180"
[1] "B_boot_idx: 181"
[1] "B_boot_idx: 182"
[1] "B_boot_idx: 183"
[1] "B_boot_idx: 184"
[1] "B_boot_idx: 185"
[1] "B_boot_idx: 186"
[1] "B_boot_idx: 187"
[1] "B_boot_idx: 188"
[1] "B_boot_idx: 189"
[1] "B_boot_idx: 190"
[1] "B_boot_idx: 191"
[1] "B_boot_idx: 192"
[1] "B_boot_idx: 193"
[1] "B_boot_idx: 194"
[1] "B_boot_idx: 195"
[1] "B_boot_idx: 196"
[1] "B_boot_idx: 197"
[1] "B_boot_idx: 198"
[1] "B_boot_idx: 199"
[1] "B_boot_idx: 200"
[1] "B_boot_idx: 201"
[1] "B_boot_idx: 202"
[1] "B_boot_idx: 203"
[1] "B_boot_idx: 204"
[1] "B_boot_idx: 205"
[1] "B_boot_idx: 206"
[1] "B_boot_idx: 207"
[1] "B_boot_idx: 208"
[1] "B_boot_idx: 209"
[1] "B_boot_idx: 210"
[1] "B_boot_idx: 211"
[1] "B_boot_idx: 212"
[1] "B_boot_idx: 213"
[1] "B_boot_idx: 214"
[1] "B_boot_idx: 215"
[1] "B_boot_idx: 216"
[1] "B_boot_idx: 217"
[1] "B_boot_idx: 218"
[1] "B_boot_idx: 219"
[1] "B_boot_idx: 220"
[1] "B_boot_idx: 221"
[1] "B_boot_idx: 222"
[1] "B_boot_idx: 223"
[1] "B_boot_idx: 224"
[1] "B_boot_idx: 225"
[1] "B_boot_idx: 226"
[1] "B_boot_idx: 227"
[1] "B_boot_idx: 228"
[1] "B_boot_idx: 229"
[1] "B_boot_idx: 230"
[1] "B_boot_idx: 231"
[1] "B_boot_idx: 232"
[1] "B_boot_idx: 233"
[1] "B_boot_idx: 234"
[1] "B_boot_idx: 235"
[1] "B_boot_idx: 236"
[1] "B_boot_idx: 237"
[1] "B_boot_idx: 238"
[1] "B_boot_idx: 239"
